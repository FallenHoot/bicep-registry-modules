{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "12183214255586309795"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The location to deploy to."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Virtual Network to create."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Key Vault to create."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Storage Account to create."
      }
    },
    "storageUploadDeploymentScriptName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Deployment Script used to upload data to the Storage Account."
      }
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Managed Identity to create."
      }
    },
    "sshDeploymentScriptName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Deployment Script to create for the SSH Key generation."
      }
    },
    "sshKeyName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the SSH Key to create."
      }
    }
  },
  "variables": {
    "$fxv#0": "<#\n.SYNOPSIS\nUpload a test file to the given Storage Account Container.\n\n.DESCRIPTION\nUpload a test file to the given Storage Account Container.\n\n.PARAMETER StorageAccountName\nMandatory. The name of the Storage Account to upload the file to\n\n.PARAMETER ResourceGroupName\nMandatory. The name of the Resource Group containing the Storage Account to upload the file to\n\n.PARAMETER ContainerName\nMandatory. The name of the Storage Account Container to upload the file to\n\n.PARAMETER FileName\nMandatory. The name of the file of the file to create in the container\n\n.EXAMPLE\n./Set-BlobContent.ps1 -StorageAccountName 'mystorage' -ResourceGroupName 'storage-rg' -ContainerName 'mycontainer' -FileName 'testCSE.ps1'\n\nGenerate a dummy file 'testCSE.ps1' to the Storage Account 'mystorage' Container 'mycontainer' in Resource Group 'storage-rg'\n#>\nparam(\n    [Parameter(Mandatory = $true)]\n    [string] $StorageAccountName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $ResourceGroupName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $ContainerName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $FileName\n)\n\nWrite-Verbose \"Create file [$FileName]\" -Verbose\n$file = New-Item -Value \"Write-Host 'I am content'\" -Path $FileName -Force\n\nWrite-Verbose \"Getting storage account [$StorageAccountName|$ResourceGroupName] context.\" -Verbose\n$storageAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -StorageAccountName $StorageAccountName -ErrorAction 'Stop'\n\nWrite-Verbose 'Uploading file [$fileName]' -Verbose\nSet-AzStorageBlobContent -File $file.FullName -Container $ContainerName -Context $storageAccount.Context -Force -ErrorAction 'Stop' | Out-Null\n",
    "$fxv#1": "<#\n.SYNOPSIS\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.DESCRIPTION\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.PARAMETER SSHKeyName\nMandatory. The name of the Public SSH Key Resource as it would be deployed in Azure\n\n.PARAMETER ResourceGroupName\nMandatory. The resource group name of the Public SSH Key Resource as it would be deployed in Azure\n\n.EXAMPLE\n./New-SSHKey.ps1 -SSHKeyName 'myKeyResource' -ResourceGroupName 'ssh-rg'\n\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource 'myKeyResource' in Resource Group 'ssh-rg'\n#>\nparam(\n    [Parameter(Mandatory = $true)]\n    [string] $SSHKeyName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $ResourceGroupName\n)\n\nif (-not ($sshKey = Get-AzSshKey -ResourceGroupName $ResourceGroupName | Where-Object { $_.Name -eq $SSHKeyName })) {\n    Write-Verbose \"No SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Generating new.\" -Verbose\n    $null = ssh-keygen -f generated -N (Get-Random -Maximum 99999)\n    $publicKey = Get-Content 'generated.pub' -Raw\n    # $privateKey = cat generated | Out-String\n} else {\n    Write-Verbose \"SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Returning.\" -Verbose\n    $publicKey = $sshKey.publicKey\n}\n# Write into Deployment Script output stream\n$DeploymentScriptOutputs = @{\n    # Requires conversion as the script otherwise returns an object instead of the plain public key string\n    publicKey = $publicKey | Out-String\n}\n",
    "storageAccountCSEFileName": "scriptExtensionMasterInstaller.ps1",
    "addressPrefix": "10.0.0.0/16"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'encryptionKey')]",
      "properties": {
        "kty": "RSA"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', 'scripts')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "defaultSubnet",
            "properties": {
              "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 16, 0)]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]",
        "enablePurgeProtection": null,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForDeployment": true,
        "enableRbacAuthorization": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'Contributor', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), 'encryptionKey')]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'encryptionKey'), 'Key Vault Crypto User', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'encryptionKey')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[parameters('storageUploadDeploymentScriptName')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "9.0",
        "retentionInterval": "P1D",
        "arguments": "[format('-StorageAccountName \"{0}\" -ResourceGroupName \"{1}\" -ContainerName \"{2}\" -FileName \"{3}\"', parameters('storageAccountName'), resourceGroup().name, 'scripts', variables('storageAccountCSEFileName'))]",
        "scriptContent": "[variables('$fxv#0')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', 'scripts')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, 'Contributor', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[parameters('sshDeploymentScriptName')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "9.0",
        "retentionInterval": "P1D",
        "arguments": "[format('-SSHKeyName \"{0}\" -ResourceGroupName \"{1}\"', parameters('sshKeyName'), resourceGroup().name)]",
        "scriptContent": "[variables('$fxv#1')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, 'Contributor', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]"
      ]
    },
    {
      "type": "Microsoft.Compute/sshPublicKeys",
      "apiVersion": "2022-03-01",
      "name": "[parameters('sshKeyName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicKey": "[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('sshDeploymentScriptName')), '2020-10-01').outputs.publicKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('sshDeploymentScriptName'))]"
      ]
    }
  ],
  "outputs": {
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Virtual Network Subnet."
      },
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-04-01').subnets[0].id]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the created Managed Identity."
      },
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]"
    },
    "managedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Managed Identity."
      },
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
    },
    "keyVaultResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Key Vault."
      },
      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
    },
    "keyVaultUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL of the created Key Vault."
      },
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
    },
    "keyVaultEncryptionKeyUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL of the created Key Vault Encryption Key."
      },
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'encryptionKey'), '2022-07-01').keyUriWithVersion]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the created Storage Account."
      },
      "value": "[parameters('storageAccountName')]"
    },
    "storageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Storage Account."
      },
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
    },
    "storageAccountCSEFileUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL of the Custom Script Extension in the created Storage Account"
      },
      "value": "[format('{0}{1}/{2}', reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01').primaryEndpoints.blob, 'scripts', variables('storageAccountCSEFileName'))]"
    },
    "SSHKeyPublicKey": {
      "type": "string",
      "metadata": {
        "description": "The Public Key of the created SSH Key."
      },
      "value": "[reference(resourceId('Microsoft.Compute/sshPublicKeys', parameters('sshKeyName')), '2022-03-01').publicKey]"
    }
  }
}