{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "10029946505087892994"
    }
  },
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Virtual Network to create."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Key Vault to create."
      }
    },
    "diskEncryptionSetName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Disk Encryption Set to create."
      }
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Managed Identity to create."
      }
    },
    "sshDeploymentScriptName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Deployment Script to create for the SSH Key generation."
      }
    },
    "sshKeyName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the SSH Key to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    }
  },
  "variables": {
    "$fxv#0": "<#\n.SYNOPSIS\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.DESCRIPTION\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.PARAMETER SSHKeyName\nMandatory. The name of the Public SSH Key Resource as it would be deployed in Azure\n\n.PARAMETER ResourceGroupName\nMandatory. The resource group name of the Public SSH Key Resource as it would be deployed in Azure\n\n.EXAMPLE\n./New-SSHKey.ps1 -SSHKeyName 'myKeyResource' -ResourceGroupName 'ssh-rg'\n\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource 'myKeyResource' in Resource Group 'ssh-rg'\n#>\nparam(\n    [Parameter(Mandatory = $true)]\n    [string] $SSHKeyName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $ResourceGroupName\n)\n\nif (-not ($sshKey = Get-AzSshKey -ResourceGroupName $ResourceGroupName | Where-Object { $_.Name -eq $SSHKeyName })) {\n    Write-Verbose \"No SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Generating new.\" -Verbose\n    $null = ssh-keygen -f generated -N (Get-Random -Maximum 99999)\n    $publicKey = Get-Content 'generated.pub' -Raw\n    # $privateKey = cat generated | Out-String\n} else {\n    Write-Verbose \"SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Returning.\" -Verbose\n    $publicKey = $sshKey.publicKey\n}\n# Write into Deployment Script output stream\n$DeploymentScriptOutputs = @{\n    # Requires conversion as the script otherwise returns an object instead of the plain public key string\n    publicKey = $publicKey | Out-String\n}\n",
    "addressPrefix": "10.0.0.0/16"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'keyEncryptionKey')]",
      "properties": {
        "kty": "RSA"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "defaultSubnet",
            "properties": {
              "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 16, 0)]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]",
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 7,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForDeployment": true,
        "enableRbacAuthorization": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Compute/diskEncryptionSets",
      "apiVersion": "2021-04-01",
      "name": "[parameters('diskEncryptionSetName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "activeKey": {
          "sourceVault": {
            "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
          },
          "keyUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey'), '2022-07-01').keyUriWithVersion]"
        },
        "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey'), 'Key Vault Crypto User', resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2021-04-01', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'Contributor', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[parameters('sshDeploymentScriptName')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "9.0",
        "retentionInterval": "P1D",
        "arguments": "[format('-SSHKeyName \"{0}\" -ResourceGroupName \"{1}\"', parameters('sshKeyName'), resourceGroup().name)]",
        "scriptContent": "[variables('$fxv#0')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, 'Contributor', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]"
      ]
    },
    {
      "type": "Microsoft.Compute/sshPublicKeys",
      "apiVersion": "2022-03-01",
      "name": "[parameters('sshKeyName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicKey": "[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('sshDeploymentScriptName')), '2020-10-01').outputs.publicKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('sshDeploymentScriptName'))]"
      ]
    }
  ],
  "outputs": {
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Virtual Network Subnet."
      },
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-04-01').subnets[0].id]"
    },
    "diskEncryptionSetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the created Disk Encryption Set."
      },
      "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
    },
    "SSHKeyPublicKey": {
      "type": "string",
      "metadata": {
        "description": "The Public Key of the created SSH Key."
      },
      "value": "[reference(resourceId('Microsoft.Compute/sshPublicKeys', parameters('sshKeyName')), '2022-03-01').publicKey]"
    }
  }
}